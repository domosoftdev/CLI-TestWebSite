#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Outil de consolidation et d'analyse pour les rapports de s√©curit√© JSON.
"""

import argparse
import json
import os
from datetime import datetime
import matplotlib
matplotlib.use('Agg')  # Use non-interactive backend
import matplotlib.pyplot as plt


SCAN_REPORTS_DIR = "scans/"

# Copied from security_checker.py to make the tool self-contained
REMEDIATION_ADVICE = {
    "CERT_EXPIRED": { "default": "Renouvelez votre certificat SSL/TLS imm√©diatement." },
    "CERT_VERIFY_FAILED": { "default": "V√©rifiez que votre cha√Æne de certificats est compl√®te (certificats interm√©diaires) et que le certificat n'est pas auto-sign√©." },
    "TLS_OBSOLETE": { "description": "D√©sactivez les protocoles SSL/TLS obsol√®tes.", "nginx": "Dans votre bloc server, utilisez : ssl_protocols TLSv1.2 TLSv1.3;", "apache": "Dans votre configuration SSL, utilisez : SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1", "default": "Consultez la documentation de votre serveur pour d√©sactiver SSLv3, TLSv1.0 et TLSv1.1." },
    "NO_HTTPS_REDIRECT": { "nginx": "Dans votre bloc server pour le port 80, utilisez : return 301 https://$host$request_uri;", "apache": "Utilisez mod_rewrite pour forcer la redirection vers HTTPS.", "default": "Configurez votre serveur web pour forcer la redirection de tout le trafic HTTP vers HTTPS." },
    "DMARC_MISSING": { "default": "Ajoutez un enregistrement DMARC √† votre zone DNS pour prot√©ger contre l'usurpation d'e-mail. Exemple : 'v=DMARC1; p=none; rua=mailto:dmarc-reports@votre-domaine.com;'" },
    "SPF_MISSING": { "default": "Ajoutez un enregistrement SPF √† votre zone DNS pour sp√©cifier les serveurs autoris√©s √† envoyer des e-mails pour votre domaine. Exemple : 'v=spf1 include:_spf.google.com ~all'" },
    "COOKIE_NO_SECURE": { "default": "Ajoutez l'attribut 'Secure' √† tous vos cookies pour vous assurer qu'ils ne sont envoy√©s que sur des connexions HTTPS." },
    "COOKIE_NO_HTTPONLY": { "default": "Ajoutez l'attribut 'HttpOnly' √† vos cookies de session pour emp√™cher leur acc√®s via JavaScript." },
    "COOKIE_NO_SAMESITE": { "default": "Ajoutez l'attribut 'SameSite=Strict' ou 'SameSite=Lax' √† vos cookies pour vous prot√©ger contre les attaques CSRF." },
    "HSTS_MISSING": { "nginx": "add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload';", "apache": "Header always set Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload'", "default": "Impl√©mentez l'en-t√™te HSTS avec un 'max-age' d'au moins 6 mois (15552000 secondes)." },
    "XFO_MISSING": { "nginx": "add_header X-Frame-Options 'SAMEORIGIN';", "apache": "Header always set X-Frame-Options 'SAMEORIGIN'", "default": "Ajoutez l'en-t√™te 'X-Frame-Options: SAMEORIGIN' ou 'DENY' pour vous prot√©ger du clickjacking." },
    "XCTO_MISSING": { "nginx": "add_header X-Content-Type-Options 'nosniff';", "apache": "Header always set X-Content-Type-Options 'nosniff'", "default": "Ajoutez l'en-t√™te 'X-Content-Type-Options: nosniff'." },
    "CSP_MISSING": { "default": "Envisagez d'impl√©menter une Content Security Policy (CSP) pour une d√©fense en profondeur contre les attaques par injection de script (XSS)." },
    "SERVER_HEADER_VISIBLE": { "nginx": "Dans votre configuration nginx, ajoutez 'server_tokens off;'.", "apache": "Dans votre configuration apache, ajoutez 'ServerTokens Prod'.", "default": "Supprimez ou masquez les en-t√™tes qui r√©v√®lent la version de votre serveur." },
    "JS_LIB_OBSOLETE": { "default": "Une ou plusieurs biblioth√®ques JavaScript sont obsol√®tes. Mettez-les √† jour vers leur derni√®re version stable pour corriger les vuln√©rabilit√©s connues." },
    "WP_CONFIG_BAK_EXPOSED": { "default": "Supprimez imm√©diatement le fichier de sauvegarde de configuration WordPress expos√© publiquement." },
    "WP_USER_ENUM_ENABLED": { "default": "Emp√™chez l'√©num√©ration des utilisateurs sur WordPress, par exemple en utilisant un plugin de s√©curit√© ou en ajoutant des r√®gles de r√©√©criture." }
}

SUPPORTED_REPORTS = {
    "dmarc": "DMARC_MISSING",
    "spf": "SPF_MISSING",
    "hsts": "HSTS_MISSING",
    "xfo": "XFO_MISSING",
    "xcto": "XCTO_MISSING",
    "csp": "CSP_MISSING",
    "js-libs": "JS_LIB_OBSOLETE",
    "http-redirect": "NO_HTTPS_REDIRECT"
}

def load_scan_results():
    """
    Charge tous les rapports de scan JSON depuis le r√©pertoire `scans/`.

    Retourne:
        list: Une liste de dictionnaires, chaque dictionnaire repr√©sentant un scan.
              Ex: [{'domain': 'google.com', 'date': datetime.obj, 'data': {...}}, ...]
    """
    scan_files = [f for f in os.listdir(SCAN_REPORTS_DIR) if f.endswith('.json')]
    results = []
    for filename in scan_files:
        try:
            # Le format du nom de fichier est {hostname}_{ddmmyy}.json
            parts = filename.replace('.json', '').split('_')
            domain = "_".join(parts[:-1])
            date_str = parts[-1]
            scan_date = datetime.strptime(date_str, '%d%m%y')

            filepath = os.path.join(SCAN_REPORTS_DIR, filename)
            with open(filepath, 'r', encoding='utf-8') as f:
                data = json.load(f)

            results.append({
                "domain": domain,
                "date": scan_date,
                "data": data
            })
        except (IndexError, ValueError, json.JSONDecodeError) as e:
            print(f"Avertissement : Impossible de parser le fichier '{filename}'. Erreur: {e}")
            continue

    # Trie les r√©sultats par domaine puis par date (du plus r√©cent au plus ancien)
    results.sort(key=lambda x: (x['domain'], x['date']), reverse=True)
    return results

def main():
    """
    Fonction principale pour l'outil de consolidation.
    """
    parser = argparse.ArgumentParser(description="Outil de consolidation pour les rapports de s√©curit√©.")
    parser.add_argument("--list-scans", metavar="DOMAIN", help="Liste tous les scans disponibles pour un domaine, tri√©s par date.")
    parser.add_argument("--compare", nargs=3, metavar=("DOMAIN", "DATE1", "DATE2"), help="Compare les scans d'un domaine entre deux dates (format YYYY-MM-DD).")
    parser.add_argument("--quick-wins", metavar="DOMAIN", nargs='?', const="all", help="Identifie les vuln√©rabilit√©s 'quick win' pour un domaine sp√©cifique ou pour tous les domaines.")
    parser.add_argument("--status", action="store_true", help="Affiche l'√©tat des scans par rapport √† une liste de cibles.")
    parser.add_argument("--oldest", action="store_true", help="Affiche les scans les plus anciens.")
    parser.add_argument("--list-expiring-certs", nargs='?', const=30, default=None, type=int, metavar='DAYS', help="Liste les certificats expirant bient√¥t (par d√©faut: 30 jours).")
    parser.add_argument("--report", nargs='+', metavar='TYPE', help="G√©n√®re un rapport d'actions pour un ou plusieurs types de vuln√©rabilit√©s (ex: dmarc, hsts, ou 'all').")
    parser.add_argument("--summary-html", action="store_true", help="G√©n√®re un rapport de synth√®se HTML pour tous les sites cibles.")
    parser.add_argument("--graph", metavar="DOMAIN", help="G√©n√®re un graphique d'√©volution du score pour un domaine.")

    args = parser.parse_args()

    if not os.path.exists(SCAN_REPORTS_DIR):
        print(f"Le r√©pertoire des scans '{SCAN_REPORTS_DIR}' n'existe pas. Veuillez le cr√©er et y placer vos rapports JSON.")
        return

    all_scans = load_scan_results()

    if not all_scans and not args.status:
        print("Aucun rapport de scan trouv√© dans le r√©pertoire 'scans/'.")
        return

    if args.list_scans:
        display_scans_for_domain(all_scans, args.list_scans)
    elif args.compare:
        compare_scans(all_scans, args.compare[0], args.compare[1], args.compare[2])
    elif args.quick_wins:
        display_quick_wins(all_scans, args.quick_wins)
    elif args.status:
        display_scan_status(all_scans)
    elif args.oldest:
        display_oldest_scans(all_scans)
    elif args.list_expiring_certs is not None:
        display_expiring_certificates(all_scans, args.list_expiring_certs)
    elif args.report:
        generate_vulnerability_report(all_scans, args.report)
    elif args.summary_html:
        generate_html_summary(all_scans)
    elif args.graph:
        generate_evolution_graph(all_scans, args.graph)
    else:
        # Si aucune commande n'est sp√©cifi√©e, afficher un r√©sum√©
        print(f"‚úÖ {len(all_scans)} rapport(s) de scan charg√©(s).")
        # parser.print_help()

def display_scans_for_domain(all_scans, domain):
    """Affiche tous les scans disponibles pour un domaine sp√©cifique."""
    scans_for_domain = [s for s in all_scans if s['domain'] == domain]
    if not scans_for_domain:
        print(f"Aucun scan trouv√© pour le domaine '{domain}'.")
        return

    print(f"üîé Scans disponibles pour '{domain}':")
    for scan in scans_for_domain:
        date_str = scan['date'].strftime('%Y-%m-%d')
        score = scan['data'].get('score_final', 'N/A')
        grade = scan['data'].get('note', 'N/A')
        print(f"  - Date: {date_str}, Score: {score}, Note: {grade}")

def display_scan_status(all_scans):
    """Affiche l'√©tat des scans par rapport √† la liste des cibles."""
    try:
        with open('targets.txt', 'r', encoding='utf-8') as f:
            targets = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        print("Le fichier 'targets.txt' est introuvable. Veuillez le cr√©er.")
        return

    scanned_domains = {s['domain'] for s in all_scans}
    print("üìä √âtat des scans cibles :")

    scanned_count = 0
    for target in targets:
        if target in scanned_domains:
            print(f"  [‚úÖ] {target}")
            scanned_count += 1
        else:
            print(f"  [‚ùå] {target}")

    print(f"\nTotal: {scanned_count} / {len(targets)} cibles scann√©es.")

def _extract_vulnerabilities(scan_data):
    """Helper pour extraire un set de vuln√©rabilit√©s identifiables d'un rapport."""
    vulnerabilities = set()

    def find_issues(data, path=""):
        if isinstance(data, dict):
            # Une vuln√©rabilit√© est un dictionnaire qui contient un remediation_id
            if 'remediation_id' in data:
                # On v√©rifie aussi qu'il ne s'agit pas d'un cas "r√©ussi" qui aurait quand m√™me un ID
                # (certains objets comme les cookies en ont)
                is_successful_case = data.get('present') is True or data.get('statut') == 'SUCCESS'
                if not is_successful_case:
                    vuln_id = f"{path}.{data['remediation_id']}"
                    vulnerabilities.add(vuln_id)

            # On continue la r√©cursion m√™me si on a trouv√© une vuln√©rabilit√©
            # pour les cas o√π des vuln√©rabilit√©s sont nich√©es.
            for key, value in data.items():
                find_issues(value, f"{path}.{key}" if path else key)
        elif isinstance(data, list):
            for i, item in enumerate(data):
                find_issues(item, f"{path}[{i}]")

    find_issues(scan_data)
    return vulnerabilities

def compare_scans(all_scans, domain, date1_str, date2_str):
    """Compare deux scans pour un domaine donn√©."""
    try:
        d1 = datetime.strptime(date1_str, '%Y-%m-%d').date()
        d2 = datetime.strptime(date2_str, '%Y-%m-%d').date()
    except ValueError:
        print("Erreur: Le format de la date doit √™tre YYYY-MM-DD.")
        return

    # S'assurer que d1 est avant d2
    if d1 > d2:
        d1, d2 = d2, d1

    scan1 = next((s for s in all_scans if s['domain'] == domain and s['date'].date() == d1), None)
    scan2 = next((s for s in all_scans if s['domain'] == domain and s['date'].date() == d2), None)

    if not scan1 or not scan2:
        print(f"Impossible de trouver les deux scans pour '{domain}' aux dates {d1} et {d2}.")
        if not scan1: print(f"Aucun scan trouv√© pour la date {d1}")
        if not scan2: print(f"Aucun scan trouv√© pour la date {d2}")
        # Proposer les dates disponibles
        display_scans_for_domain(all_scans, domain)
        return

    print(f"üîÑ Comparaison des scans pour '{domain}' entre {d1} et {d2}\n")

    # Comparaison des scores
    score1 = scan1['data'].get('score_final', 0)
    score2 = scan2['data'].get('score_final', 0)
    print(f"Score: {score1} (√† {d1}) -> {score2} (√† {d2})")
    if score2 < score1:
        print(f"  -> ‚úÖ Am√©lioration du score de {score1 - score2} points.")
    elif score2 > score1:
        print(f"  -> ‚ö†Ô∏è D√©gradation du score de {score2 - score1} points.")
    else:
        print("  -> üòê Score inchang√©.")

    # Comparaison des vuln√©rabilit√©s
    vulns1 = _extract_vulnerabilities(scan1['data'])
    vulns2 = _extract_vulnerabilities(scan2['data'])

    fixed_vulns = vulns1 - vulns2
    new_vulns = vulns2 - vulns1
    persistent_vulns = vulns1 & vulns2

    print("\n--- Changements des vuln√©rabilit√©s ---")
    if fixed_vulns:
        print("\n[‚úÖ VULN√âRABILIT√âS CORRIG√âES]")
        for v in sorted(list(fixed_vulns)):
            print(f"  - {v}")

    if new_vulns:
        print("\n[‚ùå NOUVELLES VULN√âRABILIT√âS]")
        for v in sorted(list(new_vulns)):
            print(f"  - {v}")

    if not fixed_vulns and not new_vulns:
        print("\n[üòê] Aucune nouvelle vuln√©rabilit√© d√©tect√©e et aucune n'a √©t√© corrig√©e.")

    if persistent_vulns:
        print(f"\n[‚ö†Ô∏è {len(persistent_vulns)} VULN√âRABILIT√âS PERSISTANTES]")


def display_oldest_scans(all_scans):
    """Affiche les cibles dont les scans sont les plus anciens."""
    try:
        with open('targets.txt', 'r', encoding='utf-8') as f:
            targets = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        print("Le fichier 'targets.txt' est introuvable. Veuillez le cr√©er.")
        return

    last_scan_dates = {}
    for target in targets:
        most_recent_scan = next((s for s in sorted(all_scans, key=lambda x: x['date'], reverse=True) if s['domain'] == target), None)
        last_scan_dates[target] = most_recent_scan['date'] if most_recent_scan else None

    # Trie les cibles par date de dernier scan, les non-scann√©es en premier
    sorted_targets = sorted(last_scan_dates.items(), key=lambda item: item[1] if item[1] is not None else datetime.min)

    print("üïí Scans les plus anciens (par cible) :")
    for target, date in sorted_targets:
        if date:
            print(f"  - {target.ljust(25)} Dernier scan: {date.strftime('%Y-%m-%d')}")
        else:
            print(f"  - {target.ljust(25)} Dernier scan: JAMAIS (Priorit√© haute)")

QUICK_WIN_REMEDIATION_IDS = {
    "HSTS_MISSING", "XFO_MISSING", "XCTO_MISSING", "CSP_MISSING",
    "COOKIE_NO_SECURE", "COOKIE_NO_HTTPONLY", "COOKIE_NO_SAMESITE",
    "SERVER_HEADER_VISIBLE"
}

def _get_quick_wins(scan_data):
    """Retourne un set de vuln√©rabilit√©s 'quick win' √† partir des donn√©es d'un scan."""
    if not scan_data:
        return set()
    vulns = _extract_vulnerabilities(scan_data)
    return {v for v in vulns if any(rem_id in v for rem_id in QUICK_WIN_REMEDIATION_IDS)}

def _count_critical_vulnerabilities(scan_data):
    """Compte le nombre de vuln√©rabilit√©s critiques ou √©lev√©es dans les donn√©es d'un scan."""
    if not scan_data:
        return 0
    count = 0

    def find_critical_issues(data):
        nonlocal count
        if isinstance(data, dict):
            # Une vuln√©rabilit√© critique est un dictionnaire qui a une criticit√© haute/critique
            # et qui n'est pas un cas de succ√®s.
            if data.get('criticite') in ['CRITICAL', 'HIGH']:
                is_successful_case = data.get('present') is True or data.get('statut') == 'SUCCESS'
                if not is_successful_case:
                    count += 1

            for value in data.values():
                find_critical_issues(value)
        elif isinstance(data, list):
            for item in data:
                find_critical_issues(item)

    find_critical_issues(scan_data)
    return count

def display_quick_wins(all_scans, domain_filter):
    """Identifie et affiche les vuln√©rabilit√©s 'quick win'."""

    target_domains = []
    if domain_filter == 'all':
        target_domains = sorted(list({s['domain'] for s in all_scans}))
    else:
        target_domains = [domain_filter]

    print("üöÄ Quick Wins (vuln√©rabilit√©s faciles √† corriger) :\n")

    found_any = False
    for domain in target_domains:
        most_recent_scan = next((s for s in sorted(all_scans, key=lambda x: x['date'], reverse=True) if s['domain'] == domain), None)

        if not most_recent_scan:
            if domain_filter != 'all':
                print(f"Aucun scan trouv√© pour '{domain}'.")
            continue

        quick_wins = _get_quick_wins(most_recent_scan['data'])

        if quick_wins:
            found_any = True
            print(f"--- {domain} (Scan du {most_recent_scan['date'].strftime('%Y-%m-%d')}) ---")
            for v in sorted(list(quick_wins)):
                print(f"  - {v}")
            print()

    if not found_any:
        print("Aucun 'quick win' identifi√© dans les derniers scans.")


def display_expiring_certificates(all_scans, days_threshold):
    """Affiche les certificats SSL/TLS qui expirent bient√¥t."""
    today = datetime.now()
    expiring_certs = []

    # Obtenir la liste des domaines uniques √† partir des scans
    unique_domains = sorted(list({s['domain'] for s in all_scans}))

    for domain in unique_domains:
        # Trouver le scan le plus r√©cent pour ce domaine
        most_recent_scan = next((s for s in sorted(all_scans, key=lambda x: x['date'], reverse=True) if s['domain'] == domain), None)
        if not most_recent_scan:
            continue

        cert_info = most_recent_scan['data'].get('ssl_certificate', {})
        exp_date_str = cert_info.get('date_expiration')

        if not exp_date_str:
            continue

        try:
            exp_date = datetime.strptime(exp_date_str, '%Y-%m-%d')
            days_left = (exp_date - today).days

            if 0 <= days_left <= days_threshold:
                expiring_certs.append({
                    "domain": domain,
                    "exp_date": exp_date,
                    "days_left": days_left
                })
        except ValueError:
            print(f"Avertissement : Format de date invalide pour le certificat de '{domain}': '{exp_date_str}'")
            continue

    print(f"üìú Certificats expirant dans les {days_threshold} prochains jours :\n")

    if not expiring_certs:
        print("Aucun certificat n'expire dans la p√©riode sp√©cifi√©e. ‚úÖ")
        return

    # Trie les certificats par date d'expiration (le plus proche en premier)
    expiring_certs.sort(key=lambda x: x['days_left'])

    for cert in expiring_certs:
        date_str = cert['exp_date'].strftime('%d %B %Y')
        days = cert['days_left']
        plural_s = 's' if days > 1 else ''
        print(f"  - {cert['domain'].ljust(30)} Expire le: {date_str} (dans {days} jour{plural_s})")


def generate_vulnerability_report(all_scans, report_types):
    """G√©n√®re un rapport listant les sites affect√©s par des vuln√©rabilit√©s sp√©cifiques."""

    # G√©rer le mot-cl√© 'all'
    if 'all' in [rt.lower() for rt in report_types]:
        reports_to_run = list(SUPPORTED_REPORTS.keys())
    else:
        # Valider les types de rapports demand√©s
        reports_to_run = []
        for rt in report_types:
            if rt.lower() in SUPPORTED_REPORTS:
                reports_to_run.append(rt.lower())
            else:
                print(f"Avertissement : Le type de rapport '{rt}' n'est pas support√©. Les types support√©s sont : {', '.join(SUPPORTED_REPORTS.keys())}")
        if not reports_to_run:
            print("Aucun rapport valide √† g√©n√©rer.")
            return

    print(f"üîé G√©n√©ration du rapport d'actions pour : {', '.join(reports_to_run)}\n")

    # Obtenir la liste des domaines uniques √† partir des scans
    unique_domains = sorted(list({s['domain'] for s in all_scans}))

    # Structurer les r√©sultats par type de vuln√©rabilit√©
    results = {report_type: [] for report_type in reports_to_run}

    for domain in unique_domains:
        # Trouver le scan le plus r√©cent pour ce domaine
        most_recent_scan = next((s for s in sorted(all_scans, key=lambda x: x['date'], reverse=True) if s['domain'] == domain), None)
        if not most_recent_scan:
            continue

        # Extraire les vuln√©rabilit√©s de ce scan
        vulnerabilities = _extract_vulnerabilities(most_recent_scan['data'])

        # V√©rifier si le domaine est affect√© par les vuln√©rabilit√©s demand√©es
        for report_type in reports_to_run:
            remediation_id = SUPPORTED_REPORTS[report_type]
            # Nous v√©rifions si un identifiant de vuln√©rabilit√© contient le remediation_id
            # C'est plus flexible que une √©galit√© stricte
            if any(remediation_id in v_id for v_id in vulnerabilities):
                results[report_type].append(domain)

    # Afficher le rapport
    found_any_issue = False
    for report_type, affected_domains in results.items():
        remediation_id = SUPPORTED_REPORTS[report_type]
        advice = REMEDIATION_ADVICE.get(remediation_id, {}).get('default', 'Aucun conseil de rem√©diation disponible.')

        print(f"--- Rapport pour : {report_type.upper()} ---")
        print(f"    Action recommand√©e : {advice}\n")

        if affected_domains:
            found_any_issue = True
            print("    Sites affect√©s :")
            for domain in sorted(affected_domains):
                print(f"      - {domain}")
        else:
            print("    ‚úÖ Aucun site affect√© pour ce type de vuln√©rabilit√©.")
        print("-" * (20 + len(report_type)))
        print()

    if not found_any_issue:
        print("üéâ F√©licitations ! Aucun des probl√®mes recherch√©s n'a √©t√© trouv√© sur les derniers scans de vos domaines.")


def generate_html_summary(all_scans):
    """G√©n√®re un rapport de synth√®se HTML pour tous les sites cibles."""

    try:
        with open('targets.txt', 'r', encoding='utf-8') as f:
            targets = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        print("Le fichier 'targets.txt' est introuvable. Veuillez le cr√©er pour g√©n√©rer le rapport de synth√®se.")
        return

    summary_data = []
    today = datetime.now()

    for target in targets:
        scans_for_domain = sorted([s for s in all_scans if s['domain'] == target], key=lambda x: x['date'], reverse=True)

        if scans_for_domain:
            most_recent_scan = scans_for_domain[0]
            cert_info = most_recent_scan['data'].get('ssl_certificate', {})
            exp_date_str = cert_info.get('date_expiration')
            exp_date_obj = None
            days_left = None
            if exp_date_str:
                try:
                    exp_date_obj = datetime.strptime(exp_date_str, '%Y-%m-%d')
                    days_left = (exp_date_obj - today).days
                except ValueError:
                    pass # La date est invalide, on la laisse √† None

            # Calcul de la tendance
            trend = "‚û°Ô∏è"
            if len(scans_for_domain) > 1:
                score_new = most_recent_scan['data'].get('score_final', 0)
                score_old = scans_for_domain[1]['data'].get('score_final', 0)
                if score_new < score_old:
                    trend = "‚¨áÔ∏è" # Am√©lioration
                elif score_new > score_old:
                    trend = "‚¨ÜÔ∏è" # R√©gression

            # Calculer les nouvelles m√©triques
            critical_vulns_count = _count_critical_vulnerabilities(most_recent_scan['data'])
            quick_wins_count = len(_get_quick_wins(most_recent_scan['data']))

            summary_data.append({
                "domain": target,
                "last_scan": most_recent_scan['date'].strftime('%Y-%m-%d'),
                "score": most_recent_scan['data'].get('score_final', 'N/A'),
                "grade": most_recent_scan['data'].get('note', 'N/A'),
                "trend": trend,
                "critical_vulns": critical_vulns_count,
                "quick_wins": quick_wins_count,
                "cert_exp": exp_date_obj,
                "cert_days_left": days_left
            })
        else:
            summary_data.append({
                "domain": target,
                "last_scan": "Jamais",
                "score": "N/A",
                "grade": "N/A",
                "trend": "N/A",
                "critical_vulns": "N/A",
                "quick_wins": "N/A",
                "cert_exp": None,
                "cert_days_left": None
            })

    # G√©n√©rer le HTML
    html = """
    <!DOCTYPE html>
    <html lang="fr">
    <head>
        <meta charset="utf-8">
        <title>Rapport de Synth√®se de S√©curit√©</title>
        <style>
            body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; line-height: 1.6; color: #333; background-color: #f4f4f9; margin: 0; padding: 20px; }
            h1 { color: #2c3e50; text-align: center; }
            table { width: 100%; border-collapse: collapse; margin-top: 20px; box-shadow: 0 2px 15px rgba(0,0,0,0.1); background-color: #fff; }
            th, td { padding: 12px 15px; text-align: left; border-bottom: 1px solid #ddd; }
            th { background-color: #4a69bd; color: white; }
            tr:nth-child(even) { background-color: #f2f2f2; }
            tr:hover { background-color: #e2e8f0; }
            .grade { font-weight: bold; padding: 5px 10px; border-radius: 15px; color: white; text-align: center; display: inline-block; min-width: 30px; }
            .grade-A-plus { background-color: #27ae60; }
            .grade-A { background-color: #2ecc71; }
            .grade-B { background-color: #f1c40f; }
            .grade-C { background-color: #e67e22; }
            .grade-D { background-color: #d35400; }
            .grade-F { background-color: #c0392b; }
            .trend { font-size: 1.2em; text-align: center; }
            .trend-up { color: #c0392b; }
            .trend-down { color: #27ae60; }
            .trend-stable { color: #7f8c8d; }
            .count-badge { display: inline-block; padding: 4px 10px; border-radius: 15px; color: white; font-size: 0.9em; font-weight: bold; }
            .count-critical { background-color: #c0392b; }
            .count-quickwin { background-color: #3498db; }
            .cert-badge { display: inline-block; padding: 4px 12px; border-radius: 15px; color: white; font-size: 0.9em; }
            .cert-status-ok { background-color: #27ae60; }
            .cert-status-warn { background-color: #f39c12; }
            .cert-status-danger { background-color: #c0392b; }
            .cert-status-na { background-color: #bdc3c7; }
            .footer { text-align: center; margin-top: 20px; font-size: 0.9em; color: #7f8c8d; }
        </style>
    </head>
    <body>
        <h1>Rapport de Synth√®se de S√©curit√©</h1>
        <p class="footer">G√©n√©r√© le """ + today.strftime('%d %B %Y √† %H:%M:%S') + """</p>
        <table>
            <thead>
                <tr>
                    <th>Domaine</th>
                    <th>Dernier Scan</th>
                    <th>Score</th>
                    <th>Note</th>
                    <th>Tendance</th>
                    <th>Vulns Crit/High</th>
                    <th>Quick Wins</th>
                    <th>Expiration du Certificat</th>
                </tr>
            </thead>
            <tbody>
    """

    for item in summary_data:
        grade_class = "grade-" + item['grade'].replace('+', '-plus') if item['grade'] != 'N/A' else ""

        trend_class = "trend-stable"
        if item['trend'] == '‚¨ÜÔ∏è':
            trend_class = "trend-up"
        elif item['trend'] == '‚¨áÔ∏è':
            trend_class = "trend-down"

        cert_status_class = 'cert-status-na'
        cert_text = "N/A"
        if item['cert_days_left'] is not None:
            if item['cert_days_left'] < 0:
                cert_status_class = 'cert-status-danger'
                cert_text = f"Expir√© ({item['cert_exp'].strftime('%Y-%m-%d')})"
            elif item['cert_days_left'] <= 15:
                cert_status_class = 'cert-status-danger'
                cert_text = f"{item['cert_days_left']} jours"
            elif item['cert_days_left'] <= 60:
                cert_status_class = 'cert-status-warn'
                cert_text = f"{item['cert_days_left']} jours"
            else:
                cert_status_class = 'cert-status-ok'
                cert_text = f"{item['cert_days_left']} jours"

        html += f"""
                <tr>
                    <td><strong>{item['domain']}</strong></td>
                    <td>{item['last_scan']}</td>
                    <td>{item['score']}</td>
                    <td><span class="grade {grade_class}">{item['grade']}</span></td>
                    <td class="trend {trend_class}">{item['trend']}</td>
                    <td style="text-align: center;"><span class="count-badge count-critical">{item['critical_vulns']}</span></td>
                    <td style="text-align: center;"><span class="count-badge count-quickwin">{item['quick_wins']}</span></td>
                    <td><span class="cert-badge {cert_status_class}">{cert_text}</span></td>
                </tr>
        """

    html += """
            </tbody>
        </table>
    </body>
    </html>
    """

    try:
        with open('summary_report.html', 'w', encoding='utf-8') as f:
            f.write(html)
        print("‚úÖ Rapport de synth√®se HTML 'summary_report.html' g√©n√©r√© avec succ√®s.")
    except IOError as e:
        print(f"‚ùå Erreur lors de l'√©criture du rapport HTML : {e}")


def generate_evolution_graph(all_scans, domain):
    """G√©n√®re un graphique d'√©volution du score pour un domaine sp√©cifique."""
    scans_for_domain = sorted(
        [s for s in all_scans if s['domain'] == domain],
        key=lambda x: x['date']
    )

    if len(scans_for_domain) < 2:
        print(f"Moins de deux scans trouv√©s pour '{domain}'. Impossible de g√©n√©rer un graphique d'√©volution.")
        return

    dates = [s['date'] for s in scans_for_domain]
    scores = [s['data'].get('score_final', 0) for s in scans_for_domain]

    plt.figure(figsize=(10, 6))
    plt.plot(dates, scores, marker='o', linestyle='-', color='b')

    plt.title(f"√âvolution du Score de S√©curit√© pour {domain}")
    plt.xlabel("Date du Scan")
    plt.ylabel("Score de Dangerosit√© (plus bas = mieux)")
    plt.grid(True, which='both', linestyle='--', linewidth=0.5)
    plt.ylim(bottom=0, top=max(scores) + 10) # Y-axis starts at 0
    plt.gcf().autofmt_xdate() # Format dates nicely

    filename = f"{domain}_evolution.png"
    try:
        plt.savefig(filename, bbox_inches='tight')
        print(f"‚úÖ Graphique d'√©volution '{filename}' g√©n√©r√© avec succ√®s.")
    except IOError as e:
        print(f"‚ùå Erreur lors de la sauvegarde du graphique : {e}")
    plt.close()


if __name__ == "__main__":
    main()
